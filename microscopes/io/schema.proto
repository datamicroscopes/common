package microscopes.io;

message CRP {
    required float alpha = 1;
}

message BetaBernoulliNonConj {
    message Shared {
        required float alpha = 1;
        required float beta = 2;
    }

    message Group {
        required float p = 1;
    }
}

message NormalInverseWishart {
    message Shared {
        repeated float mu0 = 1;
        required float lambda = 2;
        repeated float psi = 3;
        required float nu = 4;
    }

    message Group {
        required int32 count = 1;
        repeated float sum_x = 2;
        repeated float sum_xxT = 3;
    }
}

message GroupData {
    required uint32 id = 1;
    required bytes data = 2;
}

message GroupManager {
    required float alpha = 1;
    repeated int32 assignments = 2;
    repeated GroupData groups = 3;
}

message FixedGroupManager {
    repeated float alphas = 1;
    repeated int32 assignments = 2;
    repeated bytes groups = 3;
}

message MixtureModelGroup {
    repeated bytes suffstats = 1;
}

message MixtureModelState {
    repeated bytes hypers = 1;
    required bytes groups = 2;
}

message IrmSuffstat {
    repeated uint32 gids = 1;

    // NOTE: while there is no requirement that state objects preserve their
    // suffstat identifiers across serialization/deserialization, it certainly
    // makes debugging easier.
    required uint32 id = 2;

    // NOTE: while the refcount is redundant given the domain assignments, it
    // is annoying and slow to reconstruct, so we simply store the value.  note
    // that upon deserialization, state objects will not bother to check
    // integrity
    required uint32 count = 3;

    required bytes suffstat = 4;
}

message IrmRelation {
    required bytes hypers = 1;
    repeated IrmSuffstat suffstats = 2;
}

message IrmState {
    repeated bytes domains = 1;
    repeated IrmRelation relations = 2;
}
